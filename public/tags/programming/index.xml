<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Programming on A Blog</title>
    <link>http://localhost:1313/tags/programming/</link>
    <description>Recent content in Programming on A Blog</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Fri, 10 Oct 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/programming/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Telemetry is essential</title>
      <link>http://localhost:1313/posts/telemetry-is-essential/</link>
      <pubDate>Fri, 10 Oct 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/telemetry-is-essential/</guid>
      <description>&lt;p&gt;This is a strictly technical write-up. I do not care about the politics or intentions of companies who utilize telemetry for user tracking. I am interested in telemetry as a tool, and like every tool, it could be used for its intended purpose or to bash someone&amp;rsquo;s head in.&lt;/p&gt;&#xA;&lt;p&gt;I&amp;rsquo;ve been in the outsourcing industry for more than 10 years and while that kind of work lacks in continued purpose, and sometimes, continued involvement it does have its perks. Variety being the biggest one in my opinion. Generalist approach towards software development is my preference and outsourcing industry gives me that opportunity. I&amp;rsquo;ve built both frontend(web and desktop) and backend and tools. In all kinds of languages and frameworks - from low level to high level.&lt;/p&gt;</description>
    </item>
    <item>
      <title>NET Dynamically Generating Classes in Runtime</title>
      <link>http://localhost:1313/posts/net-dynamically-generating-classes-in-runtime/</link>
      <pubDate>Thu, 23 Mar 2017 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/net-dynamically-generating-classes-in-runtime/</guid>
      <description>&lt;p&gt;Reflection API in .NET is one of the most powerful and incredible features of it. And along with &lt;a href=&#34;https://en.wikipedia.org/wiki/Dynamic_Language_Runtime&#34;&gt;DLR&lt;/a&gt; it enables a whole new look at what can be done in .NET languages.&lt;br&gt;&#xA;One of problems i had to solve recently was how to create a unified &lt;a href=&#34;https://en.wikipedia.org/wiki/Domain-specific_language&#34;&gt;DSL&lt;/a&gt; for queries that could be used with most C# DB drivers(they had to have &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/system.linq.iqueryable(v=vs.110).aspx&#34;&gt;IQueryable&lt;/a&gt; support).&lt;br&gt;&#xA;It turned out to be simpler job than i thought. This &lt;a href=&#34;https://github.com/kahanu/System.Linq.Dynamic&#34;&gt;github project&lt;/a&gt; helped me a lot to figure out how to solve it. One of the problems was how to execute &lt;em&gt;projections&lt;/em&gt; from dbs and be able to get the information in runtime.&lt;/p&gt;</description>
    </item>
    <item>
      <title>WPF Custom UserControl Datacontext Binding Gotcha</title>
      <link>http://localhost:1313/posts/wpf-custom-usercontrol-datacontext-binding-gotcha/</link>
      <pubDate>Wed, 15 Mar 2017 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/wpf-custom-usercontrol-datacontext-binding-gotcha/</guid>
      <description>&lt;p&gt;Creating custom user controls in WPF and as well as fully supporting MVVM with binding is a pretty &lt;em&gt;straightforward&lt;/em&gt; process, but there are a couple of things that, at a first glance, look like they should work but they&amp;rsquo;re not. At least for me. One of those things is when you &lt;em&gt;bind&lt;/em&gt; &lt;code&gt;DataContext&lt;/code&gt; to code behind, or to &lt;code&gt;Self&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;h2 id=&#34;a-simple-custom-user-control&#34;&gt;A simple custom user control&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;UserControl&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;x:Class=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;SomeWpfApp.CustomUserControl&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;             &lt;span style=&#34;color:#a6e22e&#34;&gt;xmlns=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://schemas.microsoft.com/winfx/2006/xaml/presentation&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;             &lt;span style=&#34;color:#a6e22e&#34;&gt;xmlns:x=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://schemas.microsoft.com/winfx/2006/xaml&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;             &lt;span style=&#34;color:#a6e22e&#34;&gt;xmlns:mc=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://schemas.openxmlformats.org/markup-compatibility/2006&amp;#34;&lt;/span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;             &lt;span style=&#34;color:#a6e22e&#34;&gt;xmlns:d=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://schemas.microsoft.com/expression/blend/2008&amp;#34;&lt;/span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;             &lt;span style=&#34;color:#a6e22e&#34;&gt;xmlns:local=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;clr-namespace:SomeWpfApp&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;             &lt;span style=&#34;color:#a6e22e&#34;&gt;DataContext=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{Binding RelativeSource={RelativeSource Self}}&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;             &lt;span style=&#34;color:#a6e22e&#34;&gt;d:DataContext=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{d:DesignInstance Type=local:CustomUserControl, IsDesignTimeCreatable=True}&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;             &lt;span style=&#34;color:#a6e22e&#34;&gt;mc:Ignorable=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;d&amp;#34;&lt;/span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;             &lt;span style=&#34;color:#a6e22e&#34;&gt;d:DesignHeight=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;300&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;d:DesignWidth=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;300&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;Grid&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;TextBlock&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Text=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{Binding CustomText, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/Grid&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/UserControl&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here, we specify a custom user control with a &lt;code&gt;TextBlock&lt;/code&gt; that binds to a custom dependency property in code behind called &lt;code&gt;CustomText&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
